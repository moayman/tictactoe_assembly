Data_segment_name  segment  para 

XPOS DW 0
OPOS DW 0
PAK db 'Press any key to start...$'
GOVER db 'Game Over$'
YOUWON db '      You Won!$'
YOULOST db '      You Lost!$'
XCELLNO db 0FFH
OCELLNO db 0FFH
Data_segment_name ends


Stack_segment_name segment para stack

      dw 24h dup(0)               ;define your stack segment

Stack_segment_name ends


Code_segment_name  segment 

    Main_prog  proc far

        assume SS:Stack_segment_name,CS:Code_segment_name,DS:Data_segment_name
 
        MOV AX,Data_segment_name         ; load the starting address of the data
        MOV DS,AX                        ; segment into DS reg.  
		
		MOV AX,1
		INT 33H
		MOV AX,5
		MOV BX,0
		INT 33H
		
		LEA DX,PAK ;PRESS ANY KEY
		MOV AH,09H
		INT 21H
		WAITKEYPRESS: MOV AH,0BH
		INT 21H
		CMP AL,0FFH
		JNE WAITKEYPRESS

		MOV AX,5
		MOV BX,0
		INT 33H
		
		MOV AL,00H
		MOV DX,03F8H
		OUT DX,AL
		
		CALL CLEARSCREEN
		CALL DRAWBOARD
		NEWTURN: CALL RECEIVE
		CALL DRAWO
		CALL CHECKLOSE
		CMP AL,01H
		JE LOSE
		RETRY: CALL PLAYERTURN
		CALL VALIDATEPLAYERTURN
		CMP AL,01H
		JNE RETRY
		CALL DRAWX
		CALL SEND
		CALL CHECKWIN
		CMP AL,01H
		JE WIN
		JMP NEWTURN

		LOSE: MOV AX,2
		INT 33H
		LEA DX,YOULOST
		MOV AH,09H
		INT 21H
		JMP GAMEOVER

		WIN: MOV AX,2
		INT 33H
		LEA DX,YOUWON
		MOV AH,09H
		INT 21H
		JMP GAMEOVER

		GAMEOVER: MOV DL,20H
		MOV AH,02H
		INT 21H
		LEA DX,GOVER
		MOV AH,09H
		INT 21H
		MOV AH,4CH
		INT 21H

    Main_prog      endp

CHECKLOSE PROC ;LOSE AL = 01H, WIN AL = 00H
	MOV AX,OPOS
	AND AX,0007H
	CMP AX,0007H
	JE LOST
	MOV AX,OPOS
	AND AX,0038H
	CMP AX,0038H
	JE LOST
	MOV AX,OPOS
	AND AX,01C0H
	CMP AX,01C0H
	JE LOST
	MOV AX,OPOS
	AND AX,0049H
	CMP AX,0049H
	JE LOST
	MOV AX,OPOS
	AND AX,0092H
	CMP AX,0092H
	JE LOST
	MOV AX,OPOS
	AND AX,0124H
	CMP AX,0124H
	JE LOST
	MOV AX,OPOS
	AND AX,0111H
	CMP AX,0111H
	JE LOST
	MOV AX,OPOS
	AND AX,0054H
	CMP AX,0054H
	JE LOST
	MOV AL,00H
	JMP CL_LOST
	LOST:MOV AL,01H
	CL_LOST: RET
CHECKLOSE ENDP

DRAWO PROC
	MOV AX,2
	INT 33H
	MOV AL,OCELLNO
	CALL GETSTARTPOS
	MOV DI,AX
	MOV AX,0B800H
	MOV ES,AX
	MOV AX,4720H
	ADD DI,162
	STOSW
	STOSW
	STOSW
	ADD DI,154
	STOSW
	ADD DI,2
	STOSW
	ADD DI,154
	STOSW
	STOSW
	STOSW
	MOV AX,1
	INT 33H
	RET
DRAWO ENDP

RECEIVE PROC
	PUSH DX
	PUSH CX
	MOV DX,03F8H
	REVEIVEAGAIN: IN AL,DX
	CMP AL,00H
	JE REVEIVEAGAIN
	SUB AL,01H
	CMP OCELLNO,AL
	JE REVEIVEAGAIN
	MOV OCELLNO,AL
	MOV SI,0001H
	MOV CL,AL
	SHL SI,CL
	OR OPOS,SI
	POP CX
	POP DX
	RET
RECEIVE ENDP

CHECKWIN PROC ;WIN AL = 01H, LOSE AL = 00H
	MOV AX,XPOS
	AND AX,0007H
	CMP AX,0007H
	JE WON
	MOV AX,XPOS
	AND AX,0038H
	CMP AX,0038H
	JE WON
	MOV AX,XPOS
	AND AX,01C0H
	CMP AX,01C0H
	JE WON
	MOV AX,XPOS
	AND AX,0049H
	CMP AX,0049H
	JE WON
	MOV AX,XPOS
	AND AX,0092H
	CMP AX,0092H
	JE WON
	MOV AX,XPOS
	AND AX,0124H
	CMP AX,0124H
	JE WON
	MOV AX,XPOS
	AND AX,0111H
	CMP AX,0111H
	JE WON
	MOV AX,XPOS
	AND AX,0054H
	CMP AX,0054H
	JE WON
	MOV AL,00H
	JMP CW_LOST
	WON:MOV AL,01H
	CW_LOST: RET
CHECKWIN ENDP

SEND PROC
	MOV AL,XCELLNO
	ADD AL,01H
	PUSH DX
	MOV DX,03F8H
	OUT DX,AL
	POP DX
	RET
SEND ENDP

GETSTARTPOS PROC
	CMP AL,00H
	JE C0
	CMP AL,01H
	JE C1
	CMP AL,02H
	JE C2
	CMP AL,03H
	JE C3
	CMP AL,04H
	JE C4
	CMP AL,05H
	JE C5
	CMP AL,06H
	JE C6
	CMP AL,07H
	JE C7
	CMP AL,08H
	JE C8
	C0: MOV AX,704
	JMP POSLOCATED
	C1: MOV AX,716
	JMP POSLOCATED
	C2: MOV AX,728
	JMP POSLOCATED
	C3: MOV AX,1664
	JMP POSLOCATED
	C4: MOV AX,1676
	JMP POSLOCATED
	C5: MOV AX,1688
	JMP POSLOCATED
	C6: MOV AX,2624
	JMP POSLOCATED
	C7: MOV AX,2636
	JMP POSLOCATED
	C8: MOV AX,2648
	JMP POSLOCATED
;	MOV AX,704
;	CMP DL,8
;	JBE ROW0
;	CMP DL,14
;	JBE ROW1
;	CMP DL,20
;	JBE ROW2
;	ROW2: ADD AX,960
;	ROW1: ADD AX,960
;	ROW0:
;	CMP CL,36
;	JBE COL0
;	CMP CL,42
;	JBE COL1
;	CMP CL,48
;	JBE COL2
;	COL2: ADD AX,12
;	COL1: ADD AX,12
;	COL0:
	POSLOCATED: RET
GETSTARTPOS ENDP

DRAWX PROC
	MOV AX,2
	INT 33H

	MOV AL,XCELLNO     ;GET CELL NUMBER
	
	PUSH CX       ;SET XPOS
	MOV CL,AL
	MOV AX,0001H
	SHL AX,CL
	OR XPOS,AX
	POP CX

	MOV AL,XCELLNO
	CALL GETSTARTPOS
	MOV DI,AX
	MOV AX,0B800H
	MOV ES,AX
	MOV AX,2720H
	ADD DI,162
	STOSW
	ADD DI,2
	STOSW
	ADD DI,156
	STOSW
	ADD DI,156
	STOSW
	ADD DI,2
	STOSW
	MOV AX,1
	INT 33H
	RET
DRAWX ENDP


CHECKEMPTY PROC ;Empty: AL = 1
	PUSH CX
	MOV CL,AL
	MOV AX,XPOS
	OR AX,OPOS
	MOV SI,0001H
	SHL SI,CL
	TEST AX,SI
	JZ EMPTY
	MOV AL,00H
	JMP NOTEMPTY
	EMPTY: MOV AL,01H
	NOTEMPTY: POP CX
	RET
CHECKEMPTY ENDP

VALIDATEPLAYERTURN PROC ;INVALID AL = FFH, VALID AL = 01H
	MOV AL,00H ;CLEAR AL
	CMP DL,4
	JB INVALID
	CMP DL,8
	JBE ROW_ZERO
	CMP DL,10
	JB INVALID
	CMP DL,14
	JBE ROW_ONE
	CMP DL,16
	JB INVALID
	CMP DL,20
	JBE ROW_TWO
	ROW_TWO: ADD AL,01H
	ROW_ONE: ADD AL,01H
	ROW_ZERO: 
	MOV BL,3 
	MUL BL     ;ROW*3
	CMP CL,32
	JB INVALID
	CMP CL,36
	JBE COLUMN_ZERO
	CMP CL,38
	JB INVALID
	CMP CL,42
	JBE COLUMN_ONE
	CMP CL,44
	JB INVALID
	CMP CL,48
	JBE COLUMN_TWO
	COLUMN_TWO: ADD AL,01H
	COLUMN_ONE: ADD AL,01H
	COLUMN_ZERO:
	MOV XCELLNO,AL

	CALL CHECKEMPTY
	CMP AL,01H
	JE VALID

	INVALID: MOV AL,0FFH
	VALID: RET
VALIDATEPLAYERTURN ENDP

PLAYERTURN PROC
	WAITMOUSECLICK: MOV AX,5
	MOV BX,0
	INT 33H
	AND BX,0001H
	JZ WAITMOUSECLICK

	MOV BL,8
	MOV AX,DX
	DIV BL
	MOV DL,AL

	MOV AX,CX
	DIV BL
	MOV CL,AL
	RET
PLAYERTURN ENDP

CLEARSCREEN PROC
	MOV AX,0B800H
	MOV ES,AX

	MOV AX,0720H ;CLEAR
	MOV CX,2000
	MOV DI,0
	REP STOSW

	RET
CLEARSCREEN ENDP

DRAWBOARD PROC
	MOV AX,2
	INT 33H
	
	MOV AX,0B800H
	MOV ES,AX
	
	MOV AX,1720H

	MOV CX,19	;LINE1
	MOV DI,542
	REP STOSW
		
	MOV CX,4	;LINE2
	MOV DI,702
	L2: STOSW 
	ADD DI,10
	LOOP L2

	MOV CX,4	;LINE3
	MOV DI,862
	L3: STOSW
	ADD DI,10
	LOOP L3
		
	MOV CX,4	;LINE4
	MOV DI,1022
	L4: STOSW
	ADD DI,10
	LOOP L4
		
	MOV CX,4	;LINE5
	MOV DI,1182
	L5: STOSW
	ADD DI,10
	LOOP L5

	MOV CX,4	;LINE6
	MOV DI,1342
	L6: STOSW
	ADD DI,10
	LOOP L6

	MOV CX,19	;LINE7
	MOV DI,1502
	REP STOSW
		
	MOV CX,4	;LINE8
	MOV DI,1662
	L8: STOSW
	ADD DI,10
	LOOP L8
		
	MOV CX,4	;LINE9
	MOV DI,1822
	L9: STOSW
	ADD DI,10
	LOOP L9

	MOV CX,4	;LINE10
	MOV DI,1982
	L10: STOSW
	ADD DI,10
	LOOP L10
		
	MOV CX,4	;LINE11
	MOV DI,2142
	L11: STOSW
	ADD DI,10
	LOOP L11

	MOV CX,4	;LINE12
	MOV DI,2302
	L12: STOSW
	ADD DI,10
	LOOP L12

	MOV CX,19	;LINE13
	MOV DI,2462
	REP STOSW

	MOV CX,4	;LINE14
	MOV DI,2622
	L14: STOSW
	ADD DI,10
	LOOP L14

	MOV CX,4	;LINE15
	MOV DI,2782
	L15: STOSW
	ADD DI,10
	LOOP L15

	MOV CX,4	;LINE16
	MOV DI,2942
	L16: STOSW
	ADD DI,10
	LOOP L16

	MOV CX,4	;LINE17
	MOV DI,3102
	L17: STOSW
	ADD DI,10
	LOOP L17

	MOV CX,4	;LINE18
	MOV DI,3262
	L18: STOSW
	ADD DI,10
	LOOP L18

	MOV CX,19	;LINE19
	MOV DI,3422
	REP STOSW
	
	MOV AX,1
	INT 33H
	RET
DRAWBOARD ENDP
Code_segment_name   ends
                    end Main_prog

